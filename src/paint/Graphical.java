/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paint;

import java.awt.BasicStroke;
import java.awt.Color;

import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JButton;

/**
 *
 * @author Khaled
 */
public class Graphical extends javax.swing.JPanel implements ActionListener {

    /**
     * Creates new form Graphical
     */
    int flag = 0;
    shapefactory sf = shapefactory.getInstance();
    private int c = 0, width = 0, XCO, YCO;
    private int mode;
    private Color COLORS[]
            = {Color.BLACK, Color.BLUE, Color.CYAN, Color.GRAY,
                Color.GREEN, Color.lightGray, Color.MAGENTA, Color.ORANGE,
                Color.PINK, Color.RED, Color.WHITE, Color.YELLOW};

    private LinkedList<Shapes> clearedShapes; //dynamic stack of cleared shapes from undo
    private JButton colorbutton[][];
    //current Shape variables
    private int currentShapeType; //0 for line, 1 for rect, 2 for oval
    private Shapes currentShapeObject; //stores the current shape object
    private Color currentShapeColor; //current shape color
    private boolean currentShapeFilled; //determine whether shape is filled or not
    private ArrayList<Shapes> shapeArray = new ArrayList<>();
    private int xnew;
    private int ynew,n=0;

    public Graphical() {
        initComponents();
        shapeArray.removeAll(shapeArray);

        clearedShapes = new LinkedList<Shapes>(); //initialize clearedShapes dynamic stack

        //Initialize current Shape variables
        currentShapeObject = null;
        currentShapeColor = Color.BLACK;
        currentShapeFilled = false;
        colorbutton = new JButton[2][6];
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 6; j++) {

                buttons(i, j);
                SetAction(i, j);

            }
        }

    }
private void saveImage(String name,String type) {
		BufferedImage image = new BufferedImage(getWidth(),getHeight(), BufferedImage.TYPE_INT_RGB);
		Graphics2D g2 = image.createGraphics();
		paint(g2);
                n++;
		try{
			ImageIO.write(image, type, new File(name+n+"."+type));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
    public void resize(int Xshift, int Yshift) {
        currentShapeObject.setX1(currentShapeObject.getX1() + Xshift);
        currentShapeObject.setY1(currentShapeObject.getY1() + Yshift);

        // setX2(getX2() + Xshift);
        //setY2(getY2() + Yshift);
    }

    private void buttons(int i, int j) {

        // Border thickBorder = new LineBorder(Color.DARK_GRAY, 2);
        colorbutton[i][j] = new JButton();
        color.add(colorbutton[i][j]);
        colorbutton[i][j].setBackground(COLORS[c]);
        c++;
    }

    private void SetAction(int i, int j) {
        colorbutton[i][j].addActionListener(this);

    }

    public void clearLastShape() {
        if (!shapeArray.isEmpty()) {
            clearedShapes.addFront(shapeArray.remove(shapeArray.size() - 1));
            currentShapeObject=null;
            repaint();
        }
    }
 public void deleteshape() {
    if (currentShapeObject != null) {
             shapeArray.remove(currentShapeObject);
            
           clearedShapes.addFront(currentShapeObject);
            currentShapeObject = null;
           
            repaint();
        }
      
           
        
    }
    /**
     * Redo the last shape cleared if clearedShapes is not empty It calls
     * repaint() to redraw the panel.
     */
    public void redoLastShape() {
        if (!clearedShapes.isEmpty()) {
            shapeArray.add(clearedShapes.removeFront());
            repaint();
        }
    }

    /**
     * Remove all shapes in current drawing. Also makes clearedShapes empty
     * since you cannot redo after clear. It called repaint() to redraw the
     * panel.
     */
    public void clearDrawing() {
       
        shapeArray.removeAll(shapeArray);
        clearedShapes.makeEmpty();
        currentShapeObject=null;
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        Line = new javax.swing.JButton();
        Circle = new javax.swing.JButton();
        Rec = new javax.swing.JButton();
        Triangle = new javax.swing.JButton();
        C = new javax.swing.JButton();
        Sqaure = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        Save = new javax.swing.JButton();
        Copy = new javax.swing.JButton();
        undo = new javax.swing.JButton();
        redo = new javax.swing.JButton();
        Resize = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        Fill = new javax.swing.JCheckBox();
        thickness = new javax.swing.JComboBox<>();
        color = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createEtchedBorder());
        setMinimumSize(new java.awt.Dimension(634, 427));
        setName(""); // NOI18N
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        Line.setBackground(new java.awt.Color(255, 255, 255));
        Line.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/line_1.jpg"))); // NOI18N
        Line.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Line.setBorderPainted(false);
        Line.setContentAreaFilled(false);
        Line.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Line.setFocusable(false);
        Line.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Line.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Line.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineActionPerformed(evt);
            }
        });
        jPanel2.add(Line);

        Circle.setBackground(new java.awt.Color(255, 255, 255));
        Circle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/ellipse_1.jpg"))); // NOI18N
        Circle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Circle.setBorderPainted(false);
        Circle.setContentAreaFilled(false);
        Circle.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Circle.setFocusable(false);
        Circle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Circle.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CircleActionPerformed(evt);
            }
        });
        jPanel2.add(Circle);

        Rec.setBackground(new java.awt.Color(255, 255, 255));
        Rec.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/rec_1.jpg"))); // NOI18N
        Rec.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Rec.setBorderPainted(false);
        Rec.setContentAreaFilled(false);
        Rec.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Rec.setFocusable(false);
        Rec.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Rec.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Rec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecActionPerformed(evt);
            }
        });
        jPanel2.add(Rec);

        Triangle.setBackground(new java.awt.Color(255, 255, 255));
        Triangle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/triangle_1.jpg"))); // NOI18N
        Triangle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Triangle.setBorderPainted(false);
        Triangle.setContentAreaFilled(false);
        Triangle.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Triangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TriangleActionPerformed(evt);
            }
        });
        jPanel2.add(Triangle);

        C.setBackground(new java.awt.Color(255, 255, 255));
        C.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/circle_1.jpg"))); // NOI18N
        C.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        C.setBorderPainted(false);
        C.setContentAreaFilled(false);
        C.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CActionPerformed(evt);
            }
        });
        jPanel2.add(C);

        Sqaure.setBackground(new java.awt.Color(255, 255, 255));
        Sqaure.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/square_1.jpg"))); // NOI18N
        Sqaure.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Sqaure.setBorderPainted(false);
        Sqaure.setContentAreaFilled(false);
        Sqaure.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Sqaure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SqaureActionPerformed(evt);
            }
        });
        jPanel2.add(Sqaure);

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/select_1.jpg"))); // NOI18N
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setBorderPainted(false);
        jButton1.setContentAreaFilled(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1);

        Save.setBackground(new java.awt.Color(255, 255, 255));
        Save.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/save_1.jpg"))); // NOI18N
        Save.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Save.setBorderPainted(false);
        Save.setContentAreaFilled(false);
        Save.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Save.setFocusable(false);
        Save.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Save.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveActionPerformed(evt);
            }
        });
        jPanel2.add(Save);

        Copy.setBackground(new java.awt.Color(255, 255, 255));
        Copy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/copy_1.jpg"))); // NOI18N
        Copy.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Copy.setBorderPainted(false);
        Copy.setContentAreaFilled(false);
        Copy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyActionPerformed(evt);
            }
        });
        jPanel2.add(Copy);

        undo.setBackground(new java.awt.Color(255, 255, 255));
        undo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/undo_1.jpg"))); // NOI18N
        undo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        undo.setBorderPainted(false);
        undo.setContentAreaFilled(false);
        undo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        undo.setFocusable(false);
        undo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        undo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });
        jPanel2.add(undo);

        redo.setBackground(new java.awt.Color(255, 255, 255));
        redo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/redo_1.jpg"))); // NOI18N
        redo.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        redo.setBorderPainted(false);
        redo.setContentAreaFilled(false);
        redo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        redo.setFocusable(false);
        redo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        redo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoActionPerformed(evt);
            }
        });
        jPanel2.add(redo);

        Resize.setBackground(new java.awt.Color(255, 255, 255));
        Resize.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/resize_1.jpg"))); // NOI18N
        Resize.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Resize.setBorderPainted(false);
        Resize.setContentAreaFilled(false);
        Resize.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Resize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResizeActionPerformed(evt);
            }
        });
        jPanel2.add(Resize);

        clear.setBackground(new java.awt.Color(255, 255, 255));
        clear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/clear_1.jpg"))); // NOI18N
        clear.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        clear.setBorderPainted(false);
        clear.setContentAreaFilled(false);
        clear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        jPanel2.add(clear);

        delete.setBackground(new java.awt.Color(255, 255, 255));
        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paint/Icons/JPEG/delete_1.jpg"))); // NOI18N
        delete.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        delete.setBorderPainted(false);
        delete.setContentAreaFilled(false);
        delete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        jPanel2.add(delete);

        Fill.setFocusable(false);
        Fill.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Fill.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Fill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FillActionPerformed(evt);
            }
        });
        jPanel2.add(Fill);

        thickness.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Thin", "Normal", "Huge", "Extra Huge" }));
        thickness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                thicknessActionPerformed(evt);
            }
        });
        jPanel2.add(thickness);

        color.setBackground(new java.awt.Color(255, 255, 255));
        color.setMinimumSize(new java.awt.Dimension(400, 65));
        color.setPreferredSize(new java.awt.Dimension(400, 65));
        color.setLayout(new java.awt.GridLayout(2, 6));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(color, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 494, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(color, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        xnew = evt.getX();
        ynew = evt.getY();
        if (flag == 0) {
            switch (currentShapeType) //0 for line, 1 for rect, 2 for oval
            {
                case 0:

                    currentShapeObject = new Line(evt.getX(), evt.getY(),
                            evt.getX(), evt.getY(), currentShapeColor, width);

                    break;
                case 1:
                    currentShapeObject = new Rect(evt.getX(), evt.getY(),
                            evt.getX(), evt.getY(), currentShapeColor, width, currentShapeFilled);
                    break;
                case 2:
                    currentShapeObject = new Oval(evt.getX(), evt.getY(),
                            evt.getX(), evt.getY(), currentShapeColor, width, currentShapeFilled);
                    break;
                case 3:
                    currentShapeObject = new Triangle(evt.getX(), evt.getY(),
                            evt.getX(), evt.getY(), evt.getX(), evt.getY(), width, currentShapeColor, currentShapeFilled);
                    break;
                case 4:
                    currentShapeObject = new circle(evt.getX(), evt.getY(),
                            evt.getX(), evt.getY(), currentShapeColor, width, currentShapeFilled);
                    break;
                case 5:
                    currentShapeObject = new Square(evt.getX(), evt.getY(),
                            evt.getX(), evt.getY(), currentShapeColor, width, currentShapeFilled);
                    break;

            }

        }

        if (flag == 1) {
            switch (mode) {
                case 0: {

                    currentShapeObject = null;
                    for (int i = 0; i < shapeArray.size(); i++) {
                        shapeArray.get(i).setSelected(false);
                    }
                    for (int i = shapeArray.size() - 1; i >= 0; i--) {
                        currentShapeObject = shapeArray.get(i);
                        if (currentShapeObject.containsPoint(evt.getX(), evt.getY())) {
                            currentShapeObject.setSelected(true);
                            System.out.println("test");

                            break;
                        }
                    }
                    repaint();
                    break;
                }
                case 1:

                    flag = 0;
                    if (currentShapeObject != null) {
                        currentShapeObject.setX1(evt.getX());
                        currentShapeObject.setY1(evt.getY());
                    }
                    repaint();
                    break;
            }
        }


    }//GEN-LAST:event_formMousePressed
    public void copy() throws CloneNotSupportedException {
        mode = 0;
        flag = 1;
        if (currentShapeObject != null) {

            currentShapeObject.setSelected(false);
            currentShapeObject = (Shapes) currentShapeObject.clone();
            System.out.println(" u");
            currentShapeObject.setSelected(true);
            shapeArray.add(currentShapeObject);

            repaint();
        }
    }


    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased
        shapeArray.add(currentShapeObject);
        //currentShapeObject=null;
        repaint();
    }//GEN-LAST:event_formMouseReleased

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        //sets currentShapeObject x2 & Y2

        if (flag == 0) {
            currentShapeObject.setX2(evt.getX());
            currentShapeObject.setY2(evt.getY());
            switch (currentShapeType) {
                case 0: {
                    Line l = (Line) sf.getshape("line");

                    l.setX2(evt.getX());
                    l.setY2(evt.getY());

                }
                case 1: {
                    Rect R = (Rect) sf.getshape("Rect");
                    R.setX2(evt.getX());
                    R.setY2(evt.getY());

                }
                case 2: {
                    Oval O = (Oval) sf.getshape("oval");
                    O.setX2(evt.getX());
                    O.setY2(evt.getY());

                }
                case 3: {
                    Triangle t = (Triangle) sf.getshape("triangle");
                    t.setX2(evt.getX());
                    t.setY2(evt.getY());
                    int height = Math.abs(currentShapeObject.getY1() - currentShapeObject.getY2());
                    int shift = height / 2;
                    currentShapeObject.setX2(evt.getX() - shift);
                    currentShapeObject.setY2(evt.getY());
                    currentShapeObject.setX3(evt.getX() + shift);
                    currentShapeObject.setY3(evt.getY());

                }
                case 4: {
                    circle c = (circle) sf.getshape("circle");
                    c.setX2(evt.getX());
                    c.setY2(evt.getY());
                    int radius = Math.abs(currentShapeObject.getX2() - currentShapeObject.getX1());
                    currentShapeObject.setRadius(radius);
                }
                case 5: {
                    Square S = (Square) sf.getshape("Square");
                    S.setX2(evt.getX());
                    S.setY2(evt.getY());
                    int radius = Math.abs(currentShapeObject.getX2() - currentShapeObject.getX1());
                    currentShapeObject.setRadius(radius);

                }
            }
        }
        repaint();
        if (flag == 1) {
            switch (mode) {
                case 0: {
                    if (currentShapeObject != null) {
                        currentShapeObject.move(evt.getX() - xnew, evt.getY() - ynew);
                        xnew = evt.getX();
                        ynew = evt.getY();
                    }
                }
                break;
                case 2: {
                    if (currentShapeObject != null) {
                        currentShapeObject.resize(evt.getX() - xnew, evt.getY() - ynew);
                        xnew = evt.getX();
                        ynew = evt.getY();
                    }

                    break;
                }
            }
        }
    }//GEN-LAST:event_formMouseDragged


    private void CircleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CircleActionPerformed
        // TODO add your handling code here:
        flag = 0;
        currentShapeType = 2;
    }//GEN-LAST:event_CircleActionPerformed

    private void LineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineActionPerformed
        flag = 0;
        currentShapeType = 0;
    }//GEN-LAST:event_LineActionPerformed

    private void RecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecActionPerformed
        // TODO add your handling code here:
        flag = 0;
        currentShapeType = 1;
    }//GEN-LAST:event_RecActionPerformed

    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        // TODO add your handling code here:
        clearLastShape();
    }//GEN-LAST:event_undoActionPerformed

    private void redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoActionPerformed
        // TODO add your handling code here:
        redoLastShape();
    }//GEN-LAST:event_redoActionPerformed

    private void FillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FillActionPerformed
        // TODO add your handling code here:
        if (Fill.isSelected()) {
            currentShapeFilled = true;
        } else {
            currentShapeFilled = false;
        }
    }//GEN-LAST:event_FillActionPerformed

    private void thicknessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_thicknessActionPerformed
        // TODO add your handling code here:
        switch (thickness.getSelectedIndex()) {
            case 0:
                width = 2;
                break;
            case 1:
                width = 6;
                break;
            case 2:

                width = 10;
                break;
            case 3:
                width = 20;
                break;
//            case 4:
//                width = 30;

        }

    }//GEN-LAST:event_thicknessActionPerformed

    private void TriangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TriangleActionPerformed
        // TODO add your handling code here:
        flag = 0;
        currentShapeType = 3;
    }//GEN-LAST:event_TriangleActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:


    }//GEN-LAST:event_formMouseClicked

    private void CopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyActionPerformed
        try {
            copy();
        } catch (CloneNotSupportedException ex) {
            Logger.getLogger(Graphical.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_CopyActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        mode = 0;

        flag = 1;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CActionPerformed
        // TODO add your handling code here:
        flag = 0;
        currentShapeType = 4;
    }//GEN-LAST:event_CActionPerformed

    private void SqaureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SqaureActionPerformed
        // TODO add your handling code here:
        flag = 0;
        currentShapeType = 5;
    }//GEN-LAST:event_SqaureActionPerformed

    private void ResizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResizeActionPerformed
        // TODO add your handling code here:
        flag = 1;
        mode = 2;
    }//GEN-LAST:event_ResizeActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        // TODO add your handling code here:
        clearDrawing();
    }//GEN-LAST:event_clearActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        // TODO add your handling code here:
        deleteshape();
    }//GEN-LAST:event_deleteActionPerformed

    private void SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveActionPerformed
        // TODO add your handling code here:
        saveImage("Paint","png");
    }//GEN-LAST:event_SaveActionPerformed
    @Override
    public void paintComponent(Graphics g) {

        super.paintComponent(g);

        // draw the shapes
        for (int counter = shapeArray.size() - 1; counter >= 0; counter--) {
            shapeArray.get(counter).draw(g);

        }

        //draws the current Shape Object if it is not null
        if (currentShapeObject != null) {
            currentShapeObject.draw(g);

        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton C;
    private javax.swing.JButton Circle;
    private javax.swing.JButton Copy;
    private javax.swing.JCheckBox Fill;
    private javax.swing.JButton Line;
    private javax.swing.JButton Rec;
    private javax.swing.JButton Resize;
    private javax.swing.JButton Save;
    private javax.swing.JButton Sqaure;
    private javax.swing.JButton Triangle;
    private javax.swing.JButton clear;
    private javax.swing.JPanel color;
    private javax.swing.JButton delete;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton redo;
    private javax.swing.JComboBox<String> thickness;
    private javax.swing.JButton undo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        int x = 1;
        int n = 0;
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < 6; j++) {

                if (e.getSource() == colorbutton[i][j]) {
                    if (i == 0) {
                        n = x * j;

                    }
                    if (i == 1) {
                        n = 6 + j;
                    }

                    currentShapeColor = COLORS[n];
                }

            }
        }

    }
}
